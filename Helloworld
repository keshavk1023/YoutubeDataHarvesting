# Import necessary libraries
import streamlit as st  # A Python library for creating web apps
import pandas as pd  # A library for data manipulation and analysis
import numpy as np  # A library for numerical computations
from pprint import pprint

# Import libraries for Google Sheets API
import googleapiclient.discovery  # A library for Google API client

# API key and service details for YouTube API
api_key = 'AIzaSyAh_ajCgEPccQR1DgsateTWWmYbXLAcYIY'
api_service_name = "youtube"
api_version = "v3"

# Create a connection to YouTube API
youtube = googleapiclient.discovery.build(api_service_name, api_version, developerKey=api_key)

# Import MySQL connector
import mysql.connector

# Connect to MySQL database
conn = mysql.connector.connect(host='localhost', username='root', password='Ke$hw0rd-12345', database='youtube')
cursor = conn.cursor()
conn.commit()

# Create tables if they don't exist in the database
cursor.execute('''create table if not exists channel_details(channel_name VARCHAR(225),
                                                            publish_at VARCHAR(225),
                                                            playlist_id VARCHAR(225),
                                                            sub_count VARCHAR(225),
                                                            vid_count VARCHAR(225))''')
conn.commit()

cursor.execute('''create table if not exists video_ids(video_id VARCHAR(150))''')
conn.commit()

cursor.execute('''create table if not exists video_detail(channel_name VARCHAR(225),
                                                           video_id VARCHAR(225),
                                                           title VARCHAR(225),
                                                           published_date VARCHAR(225),
                                                           duration VARCHAR(225),
                                                           views VARCHAR(225),
                                                           likes VARCHAR(225),
                                                           commments VARCHAR(225)                                      
                                                            )''')
conn.commit()

cursor.execute('''create table if not exists comment_details(comment_Text text,
                                                            comment_Author VARCHAR(225),
                                                            comment_Published VARCHAR(225),
                                                            video_id VARCHAR(225))''')
conn.commit()

# Function to fetch channel details
def get_channel_detail(channel_id):
    request = youtube.channels().list(
        part="snippet,contentDetails,statistics",
        id=channel_id
    )
    response = request.execute()

    channel_data = {
        "channel_name": response['items'][0]['snippet']['title'],
        "publish_at": response['items'][0]['snippet']['publishedAt'],
        "playlist_id": response['items'][0]['contentDetails']['relatedPlaylists']['uploads'],
        "sub_count": response['items'][0]['statistics']['subscriberCount'],
        "vid_count": response['items'][0]['statistics']['videoCount'],
    }

    return channel_data


# Function to fetch video IDs
def get_videos_ids(channel_id):
    video_ids = []
    response = youtube.channels().list(id=channel_id,
                                       part='contentDetails').execute()
    Playlist_Id = response['items'][0]['contentDetails']['relatedPlaylists']['uploads']

    next_page_token = None

    # Fetch all video IDs in the playlist
    while True:
        response1 = youtube.playlistItems().list(
            part='snippet',
            playlistId=Playlist_Id,
            maxResults=50,
            pageToken=next_page_token).execute()
        for i in range(len(response1['items'])):
            video_ids.append(response1['items'][i]['snippet']['resourceId']['videoId'])
        next_page_token = response1.get('nextPageToken')

        if next_page_token is None:
            break
    return video_ids


# Function to fetch video details
def get_video_detail(video_ids):
    video_data = []
    for video_id in video_ids:
        request = youtube.videos().list(
            part="snippet,contentDetails,statistics",
            id=video_id,
        )
        response = request.execute()
        for item in response["items"]:
            data = {"channel_name": item['snippet']['channelTitle'],
                    "video_id": item['id'],
                    "title": item['snippet']['title'],
                    "published_date": item['snippet']['publishedAt'],
                    "duration": item['contentDetails']['duration'],
                    "views": item['statistics'].get('viewCount'),
                    "likes": item['statistics'].get('likeCount'),
                    "comments": item['statistics'].get('commentCount')
                    }
            video_data.append(data)
    return video_data


# Function to fetch comment details
def get_comment_detail(video_ids):
    comment_data = []
    for video_id in video_ids:
        request = youtube.commentThreads().list(
            part="snippet",
            videoId=video_id,
            maxResults=50
        )
        response = request.execute()

        for i in range(len(response['items'])):
            data = {
                "comment_Text": response['items'][i]['snippet']['topLevelComment']['snippet']['textDisplay'],
                "comment_Author": response['items'][i]['snippet']['topLevelComment']['snippet']['authorDisplayName'],
                "comment_Published": response['items'][i]['snippet']['topLevelComment']['snippet']['publishedAt'],
                "video_id": response['items'][i]['snippet']['topLevelComment']['snippet']['videoId']
            }
            comment_data.append(data)
    return comment_data


# Function to insert channel details into database
def channel_tables(channel_id):
    channel_data = get_channel_detail(channel_id)
    cursor = conn.cursor()

    sql_ch = '''INSERT INTO channel_details(channel_name ,
                                        publish_at ,
                                        playlist_id ,
                                        sub_count ,
                                        vid_count) VALUES (%s,%s,%s,%s,%s)'''
    val_ch = tuple(channel_data.values())
    cursor.execute(sql_ch, val_ch)
    conn.commit()
    return channel_data


# Function to insert video details into database
def video_tables(channel_id):
    video_ids = get_videos_ids(channel_id)
    video_data = get_video_detail(video_ids)

    vid_detail = []
    for i in video_data:
        vid_detail.append(tuple(i.values()))
    cursor = conn.cursor()

    sql_vi = '''INSERT INTO video_detail(channel_name ,
                                        video_id ,
                                        title ,
                                        published_date ,
                                        duration ,
                                        views ,
                                        likes ,
                                        commments) VALUES (%s,%s,%s,%s,%s,%s,%s,%s)'''

    val_vi = vid_detail
    cursor.executemany(sql_vi, val_vi)
    conn.commit()
    return video_data


# Function to insert comment details into database
def comment_tables(channel_id):
    video_ids = get_videos_ids(channel_id)
    comment_data = get_comment_detail(video_ids)

    comment_detail = []
    for i in comment_data:
        comment_detail.append(tuple(i.values()))
    cursor = conn.cursor()

    sql_co = '''INSERT INTO comment_details(comment_Text,
                                        comment_Author,
                                        comment_Published,
                                        video_id) VALUES (%s,%s,%s,%s)'''
    val_co = comment_detail
    cursor.executemany(sql_co, val_co)
    conn.commit()

    return comment_data


# Input field to enter channel ID
channel_id = str(st.text_input("ENTER CHANNEL IDðŸ‘‰: "))

# Sidebar option to select table to show
options = ['select option', 'show channel details', 'show video details', 'show comments']
with st.sidebar:
    selected = st.selectbox("Select table to show", options=options)

# Check selected option and display corresponding table
if selected == options[0]:
    None

if selected == options[1]:
    data = channel_tables(channel_id)
    st.dataframe(data)

if selected == options[2]:
    data = video_tables(channel_id)
    st.dataframe(data)

if selected == options[3]:
    data = comment_tables(channel_id)
    st.dataframe(data)
